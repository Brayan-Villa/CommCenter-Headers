/*
*This header is generated by classdump-dyld 1.5
*on Tuesday, June 8, 2021 at 2:19:30 PM Central Daylight Time
*Operating System: Version 14.7 (Build 18G5023c)
*Image Source: /System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter
*classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
*/


@class NSObject<OS_dispatch_object>;

typedef struct shared_ptr<Registry> {
	Registry __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Registry>;

typedef struct weak_ptr<CarrierSpaceControllerInterface> {
	CarrierSpaceControllerInterface __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<CarrierSpaceControllerInterface>;

typedef struct object {
	dispatch_object_s fObj;
} object;

typedef struct queue {
	object fObj;
} queue;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_CT5;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _short {
	char __data_[23];
	SCD_Struct_CT5 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
	const ep __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>>;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>;

typedef struct shared_ptr<ctu::Logger> {
	Logger __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ctu::Logger>;

typedef struct shared_ptr<carrier_space::EntitlementValidator> {
	EntitlementValidator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<carrier_space::EntitlementValidator>;

typedef const struct shared_ptr<const Registry>* shared_ptr<const Registry>Ref;

typedef struct _compressed_pair<ctu::RestModule *, std::__1::default_delete<ctu::RestModule>> {
	RestModule __value_;
} compressed_pair<ctu::RestModule *, std::__1::default_delete<ctu::RestModule>>;

typedef struct unique_ptr<ctu::RestModule, std::__1::default_delete<ctu::RestModule>> {
	compressed_pair<ctu::RestModule *, std::__1::default_delete<ctu::RestModule>> __ptr_;
} unique_ptr<ctu::RestModule, std::__1::default_delete<ctu::RestModule>>;

typedef struct command_provider_t<unexpected_mo_dial>* command_provider_t<unexpected_mo_dial>Ref;

typedef struct event_sink_t<unexpected_answer>* event_sink_t<unexpected_answer>Ref;

typedef struct event_sink_t<unexpected_hold>* event_sink_t<unexpected_hold>Ref;

typedef struct _compressed_pair<CurrentCallInfo *, std::__1::allocator<CurrentCallInfo>> {
	CurrentCallInfo __value_;
} compressed_pair<CurrentCallInfo *, std::__1::allocator<CurrentCallInfo>>;

typedef struct vector<CurrentCallInfo, std::__1::allocator<CurrentCallInfo>> {
	CurrentCallInfo __begin_;
	CurrentCallInfo __end_;
	compressed_pair<CurrentCallInfo *, std::__1::allocator<CurrentCallInfo>> __end_cap_;
} vector<CurrentCallInfo, std::__1::allocator<CurrentCallInfo>>;

typedef struct property_sink_t<current_calls> {
	vector<CurrentCallInfo, std::__1::allocator<CurrentCallInfo>> fValue;
} property_sink_t<current_calls>;

typedef struct shared_ptr<CellularPlanSettings> {
	CellularPlanSettings __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CellularPlanSettings>;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct _value_func<void (bool)> {
	type __buf_;
	__base<void (bool)> __f_;
} value_func<void (bool)>;

typedef struct function<void (bool)> {
	value_func<void (bool)> __f_;
} function<void (bool)>;

typedef struct block<bool ()(const __CFString *, const void *)> {
	/*^block*/id fBlock;
} block<bool ()(const __CFString *, const void *)>;

typedef struct block<void ()(const __CFDictionary *, const __CFArray *, bool)> {
	/*^block*/id fBlock;
} block<void ()(const __CFDictionary *, const __CFArray *, bool)>;

typedef struct block<void ()(std::__1::shared_ptr<CallServicesSyncBase::DevsInfo>)> {
	/*^block*/id fBlock;
} block<void ()(std::__1::shared_ptr<CallServicesSyncBase::DevsInfo>)>;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct _compressed_pair<ctu::OsLogLogger *, std::__1::default_delete<ctu::OsLogLogger>> {
	OsLogLogger __value_;
} compressed_pair<ctu::OsLogLogger *, std::__1::default_delete<ctu::OsLogLogger>>;

typedef struct unique_ptr<ctu::OsLogLogger, std::__1::default_delete<ctu::OsLogLogger>> {
	compressed_pair<ctu::OsLogLogger *, std::__1::default_delete<ctu::OsLogLogger>> __ptr_;
} unique_ptr<ctu::OsLogLogger, std::__1::default_delete<ctu::OsLogLogger>>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>>;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, void *>>>;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>>;

typedef struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>> {
	tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>> __tree_;
} map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<void ()(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>>;

typedef struct _compressed_pair<(anonymous namespace)::CellularPlanIDSCallbacks *, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>> {
	CellularPlanIDSCallbacks __value_;
} compressed_pair<(anonymous namespace)::CellularPlanIDSCallbacks *, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>>;

typedef struct vector<(anonymous namespace)::CellularPlanIDSCallbacks, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>> {
	CellularPlanIDSCallbacks __begin_;
	CellularPlanIDSCallbacks __end_;
	compressed_pair<(anonymous namespace)::CellularPlanIDSCallbacks *, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>> __end_cap_;
} vector<(anonymous namespace)::CellularPlanIDSCallbacks, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>>;

typedef struct optional<CellularPlanIDSDevice>Baligned_storage<CellularPlanIDSDevice>(dummy_u[64c]a8)* ptional<CellularPlanIDSDevice>Ref;

typedef struct _NSZone* NSZoneRef;

typedef struct _compressed_pair<CTXPCClientTracker *, std::__1::allocator<CTXPCClientTracker>> {
	CTXPCClientTracker __value_;
} compressed_pair<CTXPCClientTracker *, std::__1::allocator<CTXPCClientTracker>>;

typedef struct vector<CTXPCClientTracker, std::__1::allocator<CTXPCClientTracker>> {
	CTXPCClientTracker __begin_;
	CTXPCClientTracker __end_;
	compressed_pair<CTXPCClientTracker *, std::__1::allocator<CTXPCClientTracker>> __end_cap_;
} vector<CTXPCClientTracker, std::__1::allocator<CTXPCClientTracker>>;

typedef struct property_derived_sink_t<radio_mode::is_online> {
	BOOL fValue;
} property_derived_sink_t<radio_mode::is_online>;

typedef struct duration<long long, std::__1::ratio<1, 1000000>> {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000000>>;

typedef struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
	duration<long long, std::__1::ratio<1, 1000000>> __d_;
} time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>>;

typedef struct shared_ptr<void> {
	void __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<void>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, xpc::dict>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, xpc::dict>>>;

typedef struct map<subscriber::SimSlot, xpc::dict, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, xpc::dict>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, xpc::dict>>> __tree_;
} map<subscriber::SimSlot, xpc::dict, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, xpc::dict>>>;

typedef struct property_sink_t<call_capabilities> {
	map<subscriber::SimSlot, xpc::dict, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, xpc::dict>>> fValue;
} property_sink_t<call_capabilities>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>>>;

typedef struct map<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>>> __tree_;
} map<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>>>;

typedef struct property_derived_sink_t<emergency_numbers::for_voice> {
	map<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>>> fValue;
} property_derived_sink_t<emergency_numbers::for_voice>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>>;

typedef struct map<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> __tree_;
} map<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>>;

typedef struct property_sink_t<disambiguation_emergency_numbers> {
	map<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> fValue;
} property_sink_t<disambiguation_emergency_numbers>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>>>;

typedef struct map<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>>> __tree_;
} map<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>>>;

typedef struct property_sink_t<numbers_excluded_from_call_history> {
	map<subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<CSIPhoneNumber, std::__1::allocator<CSIPhoneNumber>>>>> fValue;
} property_sink_t<numbers_excluded_from_call_history>;

typedef struct CallFrequencyData {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> fCallUuid;
	object fFrequencyData;
	BOOL fIsInputData;
} CallFrequencyData;

typedef struct property_sink_t<call_frequency_data> {
	CallFrequencyData fValue;
} property_sink_t<call_frequency_data>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, bool>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, bool>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, bool>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, bool>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, bool>>>;

typedef struct map<subscriber::SimSlot, bool, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, bool>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, bool>>> __tree_;
} map<subscriber::SimSlot, bool, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, bool>>>;

typedef struct property_sink_t<thumper_handoff_allowed> {
	map<subscriber::SimSlot, bool, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, bool>>> fValue;
} property_sink_t<thumper_handoff_allowed>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, void *>>>;

typedef struct _tree<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>> __pair3_;
} tree<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>>>;

typedef struct OverloadEqualityOperators<std::__1::map<PersonalityID, VoWiFiProvisioningState, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, VoWiFiProvisioningState>>>> {
	tree<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>>> __tree_;
} OverloadEqualityOperators<std::__1::map<PersonalityID, VoWiFiProvisioningState, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, VoWiFiProvisioningState>>>>;

typedef struct property_sink_t<rest::vowifi_prov_state> {
	OverloadEqualityOperators<std::__1::map<PersonalityID, VoWiFiProvisioningState, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, VoWiFiProvisioningState>>>> fValue;
} property_sink_t<rest::vowifi_prov_state>;

typedef struct event_sink_t<call_control_failure>* event_sink_t<call_control_failure>Ref;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>>>;

typedef struct map<subscriber::SimSlot, rest::SubscriptionContext, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, rest::SubscriptionContext>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>>> __tree_;
} map<subscriber::SimSlot, rest::SubscriptionContext, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, rest::SubscriptionContext>>>;

typedef struct SubscriptionInfo {
	map<subscriber::SimSlot, rest::SubscriptionContext, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, rest::SubscriptionContext>>> fSubscriptions;
} SubscriptionInfo;

typedef struct property_sink_t<rest::subscription_info> {
	SubscriptionInfo fValue;
} property_sink_t<rest::subscription_info>;

typedef struct _compressed_pair<rest::SubscriptionContext *, std::__1::allocator<rest::SubscriptionContext>> {
	SubscriptionContext __value_;
} compressed_pair<rest::SubscriptionContext *, std::__1::allocator<rest::SubscriptionContext>>;

typedef struct vector<rest::SubscriptionContext, std::__1::allocator<rest::SubscriptionContext>> {
	SubscriptionContext __begin_;
	SubscriptionContext __end_;
	compressed_pair<rest::SubscriptionContext *, std::__1::allocator<rest::SubscriptionContext>> __end_cap_;
} vector<rest::SubscriptionContext, std::__1::allocator<rest::SubscriptionContext>>;

typedef struct ActiveSubscriptions {
	vector<rest::SubscriptionContext, std::__1::allocator<rest::SubscriptionContext>> fSubscriptions;
} ActiveSubscriptions;

typedef struct property_sink_t<rest::active_subscriptions> {
	ActiveSubscriptions fValue;
} property_sink_t<rest::active_subscriptions>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, CallStateSummary>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, CallStateSummary>, void *>>>;

typedef struct _tree<std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, CallStateSummary>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, CallStateSummary>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>> __pair3_;
} tree<std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, CallStateSummary>>>;

typedef struct map<PersonalityID, CallStateSummary, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, CallStateSummary>>> {
	tree<std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, CallStateSummary>>> __tree_;
} map<PersonalityID, CallStateSummary, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, CallStateSummary>>>;

typedef struct property_sink_t<call_state> {
	map<PersonalityID, CallStateSummary, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, CallStateSummary>>> fValue;
} property_sink_t<call_state>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, MCC>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, MCC>, void *>>>;

typedef struct _tree<std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, MCC>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, MCC>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>> __pair3_;
} tree<std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, MCC>>>;

typedef struct map<subscriber::SimSlot, MCC, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, MCC>>> {
	tree<std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, MCC>>> __tree_;
} map<subscriber::SimSlot, MCC, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, MCC>>>;

typedef struct property_sink_t<rest::last_visible_mccs> {
	map<subscriber::SimSlot, MCC, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, MCC>>> fValue;
} property_sink_t<rest::last_visible_mccs>;

typedef struct weak_ptr<DataNetworkMonitor> {
	DataNetworkMonitor __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<DataNetworkMonitor>;

typedef struct _value_func<void (const InternetReachabilityInterface &)> {
	type __buf_;
	__base<void (const InternetReachabilityInterface &)> __f_;
} value_func<void (const InternetReachabilityInterface &)>;

typedef struct function<void (const InternetReachabilityInterface &)> {
	value_func<void (const InternetReachabilityInterface &)> __f_;
} function<void (const InternetReachabilityInterface &)>;

typedef struct property_source_t<internet_reachability_interface> {
	function<void (const InternetReachabilityInterface &)> fSender;
	unsigned char fValue;
} property_source_t<internet_reachability_interface>;

typedef struct _value_func<void (const InternetStatus &)> {
	type __buf_;
	__base<void (const InternetStatus &)> __f_;
} value_func<void (const InternetStatus &)>;

typedef struct function<void (const InternetStatus &)> {
	value_func<void (const InternetStatus &)> __f_;
} function<void (const InternetStatus &)>;

typedef struct property_source_t<internet_status> {
	function<void (const InternetStatus &)> fSender;
	unsigned char fValue;
} property_source_t<internet_status>;

typedef struct _value_func<void (const WifiStatus &)> {
	type __buf_;
	__base<void (const WifiStatus &)> __f_;
} value_func<void (const WifiStatus &)>;

typedef struct function<void (const WifiStatus &)> {
	value_func<void (const WifiStatus &)> __f_;
} function<void (const WifiStatus &)>;

typedef struct property_source_t<wifi_status> {
	function<void (const WifiStatus &)> fSender;
	unsigned char fValue;
} property_source_t<wifi_status>;

typedef struct shared_ptr<ctu::RestModuleState> {
	RestModuleState __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ctu::RestModuleState>;

typedef struct RestModule {
	shared_ptr<ctu::RestModuleState> fState;
} RestModule;

typedef struct _value_func<void ()> {
	type __buf_;
	__base<void ()> __f_;
} value_func<void ()>;

typedef struct function<void ()> {
	value_func<void ()> __f_;
} function<void ()>;

typedef struct CommonDataConnectionAgentData {
	char regStatus;
	char inHomeCountry;
	char dch;
	char utbf;
	char hoGeneration;
} CommonDataConnectionAgentData;

typedef struct DataConnectionAgentData {
	CommonDataConnectionAgentData common;
	int type;
} DataConnectionAgentData;

typedef struct OSSharedRef<os_log_s> {
	os_log_s fRef;
} OSSharedRef<os_log_s>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, void *>>>;

typedef struct _tree<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>, std::__1::allocator<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>> __pair3_;
} tree<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>, std::__1::allocator<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>>>;

typedef struct map<NSXPCConnection *, (anonymous namespace)::ClientInfo, std::__1::less<NSXPCConnection *>, std::__1::allocator<std::__1::pair<NSXPCConnection *const, (anonymous namespace)::ClientInfo>>> {
	tree<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>, std::__1::allocator<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>>> __tree_;
} map<NSXPCConnection *, (anonymous namespace)::ClientInfo, std::__1::less<NSXPCConnection *>, std::__1::allocator<std::__1::pair<NSXPCConnection *const, (anonymous namespace)::ClientInfo>>>;

typedef struct CFSharedRef<const __CFData> {
	__CFData fRef;
} CFSharedRef<const __CFData>;

typedef struct CFSharedRef<const __CFString> {
	__CFString fRef;
} CFSharedRef<const __CFString>;

typedef struct dict {
	object fObj;
} dict;

typedef struct weak_ptr<NanoRegistryObserverDelegate> {
	NanoRegistryObserverDelegate __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<NanoRegistryObserverDelegate>;

typedef struct block<void ()(iCloudAccountEvent, const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> &)> {
	/*^block*/id fBlock;
} block<void ()(iCloudAccountEvent, const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> &)>;

typedef struct shared_ptr<ctu::Timer> {
	Timer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ctu::Timer>;

typedef struct shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>;

typedef struct weak_ptr<SubscriberUserAlertManagerInterface> {
	SubscriberUserAlertManagerInterface __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<SubscriberUserAlertManagerInterface>;

typedef struct os_log_s* os_log_sRef;

typedef struct weak_ptr<CellularPlanController> {
	CellularPlanController __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<CellularPlanController>;

typedef struct weak_ptr<CellularPlanControllerInterface> {
	CellularPlanControllerInterface __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<CellularPlanControllerInterface>;

typedef struct weak_ptr<CellularPlanControllerDebugInterface> {
	CellularPlanControllerDebugInterface __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<CellularPlanControllerDebugInterface>;

typedef struct block<void ()(const __CFString *, const __CFString *, const void *)> {
	/*^block*/id fBlock;
} block<void ()(const __CFString *, const __CFString *, const void *)>;

typedef struct block<void ()(std::__1::shared_ptr<P2PDeviceDescr>)> {
	/*^block*/id fBlock;
} block<void ()(std::__1::shared_ptr<P2PDeviceDescr>)>;

typedef struct block<void ()(const __CFString *, const __CFString *, const void *, const __CFURL *, bool &)> {
	/*^block*/id fBlock;
} block<void ()(const __CFString *, const __CFString *, const void *, const __CFURL *, bool &)>;

typedef struct shared_ptr<P2PDeviceDescr> {
	P2PDeviceDescr __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<P2PDeviceDescr>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, void *>>>;

typedef struct _tree<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>, std::__1::allocator<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>> __pair3_;
} tree<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>, std::__1::allocator<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>>>;

typedef struct map<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>, (anonymous namespace)::compareCFStringsSharedRef, std::__1::allocator<std::__1::pair<const ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>>> {
	tree<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>, std::__1::allocator<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>>> __tree_;
} map<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>, (anonymous namespace)::compareCFStringsSharedRef, std::__1::allocator<std::__1::pair<const ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void ()(const __CFString *, bool, int)>>>>;

typedef struct shared_ptr<WeaLocationDelegateInterface> {
	WeaLocationDelegateInterface __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<WeaLocationDelegateInterface>;

typedef struct _compressed_pair<unsigned long, std::__1::less<int>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<int>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *>>>;

typedef struct _tree<int, std::__1::less<int>, std::__1::allocator<int>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::less<int>> __pair3_;
} tree<int, std::__1::less<int>, std::__1::allocator<int>>;

typedef struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
	tree<int, std::__1::less<int>, std::__1::allocator<int>> __tree_;
} set<int, std::__1::less<int>, std::__1::allocator<int>>;

typedef struct shared_ptr<iCloudAccountNotificator> {
	iCloudAccountNotificator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<iCloudAccountNotificator>;

typedef struct _value_func<void (const bool &)> {
	type __buf_;
	__base<void (const bool &)> __f_;
} value_func<void (const bool &)>;

typedef struct function<void (const bool &)> {
	value_func<void (const bool &)> __f_;
} function<void (const bool &)>;

typedef struct property_source_t<edu_mode> {
	function<void (const bool &)> fSender;
	BOOL fValue;
} property_source_t<edu_mode>;

typedef struct weak_ptr<push::PushController> {
	PushController __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<push::PushController>;

typedef struct __CFArray* CFArrayRef;

typedef struct __CFUUID* CFUUIDRef;

