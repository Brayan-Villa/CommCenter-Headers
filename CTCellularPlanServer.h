/*
*This header is generated by classdump-dyld 1.5
*on Tuesday, June 8, 2021 at 2:19:30 PM Central Daylight Time
*Operating System: Version 14.7 (Build 18G5023c)
*Image Source: /System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter
*classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
*/

#import <CommCenter/CommCenter-Structs.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>

@class NSXPCListener, NSMutableArray, NSString;

@interface CTCellularPlanServer : NSObject <NSXPCListenerDelegate> {

	NSXPCListener* fXpcListener;
	NSMutableArray* fConnections;
	NSMutableArray* fConnectionsInPurchaseFlow;
	queue* fQueue;
	shared_ptr<ctu::Logger>* fLogger;
	BOOL fIsDataPlanCapable;
	shared_ptr<const Registry>* fRegistry;
	weak_ptr<CellularPlanController>* fCellularPlanControlleriPad;
	weak_ptr<CellularPlanControllerInterface>* fCellularPlanControllerPhone;
	weak_ptr<CellularPlanControllerDebugInterface>* fDebugCellularPlanController;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)initializeServerWithRegistry:(const shared_ptr<const Registry>*)arg1 ;
+(id)sharedServerInstance;
+(void)setProfileId:(VinylProfileDetails*)arg1 fromIccid:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)arg2 ;
-(const shared_ptr<const Registry>*)getRegistry;
-(void)setCellularPlanController:(shared_ptr<CellularPlanController>*)arg1 andPhoneController:(shared_ptr<CellularPlanControllerInterface>*)arg2 andDebugController:(shared_ptr<CellularPlanControllerDebugInterface>*)arg3 ;
-(id)initWithMachServiceName:(id)arg1 andQueue:(queue*)arg2 andRegistry:(const shared_ptr<const Registry>*)arg3 ;
-(id)_getErrorFromCellularPlanError:(unsigned char)arg1 ;
-(void)shouldShowPlanSetup:(/*^block*/id)arg1 ;
-(void)isNewDataPlanCapable:(/*^block*/id)arg1 ;
-(void)getSupportedFlowTypes:(/*^block*/id)arg1 ;
-(void)startProvisioningWithCompletion:(/*^block*/id)arg1 ;
-(void)finishProvisioningWithCompletion:(/*^block*/id)arg1 ;
-(void)triggerAddNewDataPlan:(/*^block*/id)arg1 ;
-(void)addNewPlanWithFlowType:(unsigned long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)addNewPlanWithCarrierItem:(id)arg1 triggerType:(long long)arg2 userConsent:(long long)arg3 completion:(/*^block*/id)arg4 ;
-(void)addNewPlanWithCardData:(id)arg1 confirmationCode:(id)arg2 triggerType:(long long)arg3 userConsent:(long long)arg4 completion:(/*^block*/id)arg5 ;
-(void)addNewPlanWithAddress:(id)arg1 matchingId:(id)arg2 oid:(id)arg3 confirmationCode:(id)arg4 triggerType:(long long)arg5 userConsent:(long long)arg6 completion:(/*^block*/id)arg7 ;
-(void)addNewAddonPlanDuringBuddy:(BOOL)arg1 userConsent:(long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)addNewPlanWithUserInWebsheetWithUserConsent:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)resumePlanProvisioning:(BOOL)arg1 userConsent:(long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)isAddButtonEnabled:(/*^block*/id)arg1 ;
-(void)shouldShowPlanList:(/*^block*/id)arg1 ;
-(void)planItemsWithCompletion:(/*^block*/id)arg1 ;
-(void)danglingPlanItemsShouldUpdate:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)getPlansPendingTransferWithCompletion:(/*^block*/id)arg1 ;
-(void)activatePlanPendingTransfer:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cancelPlanActivation:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)deletePlanPendingTransfer:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)resolveSimLabel:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)remapSimLabel:(id)arg1 to:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)carrierItemsShouldUpdate:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)userDidProvideResponse:(long long)arg1 confirmationCode:(id)arg2 plan:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)willDisplayPlanItems;
-(void)didSelectPlanItem:(id)arg1 enable:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)didSelectPlanForData:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setLabelForPlan:(id)arg1 label:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)didSelectPlanForDefaultVoice:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)didSelectPlansForIMessage:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)didDeletePlanItem:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)eraseAllPlansWithCompletion:(/*^block*/id)arg1 ;
-(void)planLaunchInfoWithCompletion:(/*^block*/id)arg1 ;
-(void)didPurchasePlanForCsn:(id)arg1 iccid:(id)arg2 profileServer:(id)arg3 ;
-(void)didTransferPlanForCsn:(id)arg1 iccid:(id)arg2 srcIccid:(id)arg3 profileServer:(id)arg4 state:(id)arg5 ;
-(void)carrierHandoffToken:(/*^block*/id)arg1 ;
-(void)manageAccountForPlan:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)sendPlanInfoDidUpdateNotification;
-(void)sendLocalPlanInfoDidUpdateNotification:(unsigned char)arg1 ;
-(void)sendPendingTransferPlanInfoDidUpdateNotification;
-(void)sendCarrierInfoDidUpdateNotification;
-(void)sendRemoteProvisioningDidBecomeAvailable;
-(void)sendIMessageSelectionSlot:(vector<subscriber::SimSlot, std::__1::allocator<subscriber::SimSlot>>*)arg1 ;
-(void)didPurchasePlanWithIccid:(id)arg1 downloadProfile:(BOOL)arg2 ;
-(void)setUserInPurchaseFlow:(BOOL)arg1 withConnection:(id)arg2 ;
-(void)signIdMapForSessionId:(id)arg1 locationRequired:(BOOL)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)fetchNewProfilesWithNewPlanCompletion:(/*^block*/id)arg1 andCompletion:(/*^block*/id)arg2 additionalParameters:(id)arg3 ;
-(void)getDeviceInfo:(/*^block*/id)arg1 ;
-(void)launchSequoia;
-(void)expirePlan;
-(void)launchDataActivationNextWithUrl:(id)arg1 ;
-(void)isRemotePlanCapableWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)shouldShowAddNewRemotePlanWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)startRemoteProvisioningWithCompletion:(/*^block*/id)arg1 ;
-(void)finishRemoteProvisioningWithCompletion:(/*^block*/id)arg1 ;
-(void)manageAccountForRemotePlan:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)addNewRemotePlan:(BOOL)arg1 withCSN:(id)arg2 withContext:(id)arg3 userConsent:(long long)arg4 completion:(/*^block*/id)arg5 ;
-(void)addNewRemotePlanWithCardData:(id)arg1 confirmationCode:(id)arg2 isPairing:(BOOL)arg3 withCSN:(id)arg4 withContext:(id)arg5 userConsent:(long long)arg6 completion:(/*^block*/id)arg7 ;
-(void)addNewRemotePlanWithAddress:(id)arg1 matchingId:(id)arg2 oid:(id)arg3 confirmationCode:(id)arg4 isPairing:(BOOL)arg5 withCSN:(id)arg6 withContext:(id)arg7 userConsent:(long long)arg8 completion:(/*^block*/id)arg9 ;
-(void)installPendingRemotePlan:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)remotePlanItemsWithUpdateFetch:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)didSelectRemotePlanItem:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)didDeleteRemotePlanItem:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)didPurchaseRemotePlanForEid:(id)arg1 imei:(id)arg2 meid:(id)arg3 iccid:(id)arg4 alternateSmdpFqdn:(id)arg5 completion:(/*^block*/id)arg6 ;
-(void)didCancelRemotePlan;
-(void)pendingReleaseRemotePlan;
-(void)userSignupInitiatedOrFailed;
-(void)remotePlanLaunchInfoForEid:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)eraseAllRemotePlansWithCompletion:(/*^block*/id)arg1 ;
-(void)remoteUserDidProvideResponse:(BOOL)arg1 confirmationCode:(id)arg2 plan:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)getPredefinedLabels:(/*^block*/id)arg1 ;
-(void)getSubscriptionContextUUIDforPlan:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)getShortLabelsForLabels:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)fetchRemoteProfiles:(id)arg1 ;
-(void)getAutoPlanSelectionWithCompletion:(/*^block*/id)arg1 ;
-(void)setAutoPlanSelection:(BOOL)arg1 ;
-(void)getRoamingSignupOverrideWithCompletion:(/*^block*/id)arg1 ;
-(void)setRoamingSignupOverride:(BOOL)arg1 ;
-(void)getSkipEligibilityCheck:(/*^block*/id)arg1 ;
-(void)setSkipEligibilityCheck:(BOOL)arg1 ;
-(void)selectRemoteProfile:(id)arg1 ;
-(void)deleteRemoteProfile:(id)arg1 ;
-(void)deleteAllRemoteProfiles;
-(void)getRemoteInfo:(/*^block*/id)arg1 ;
-(void)getPhoneAuthTokenWithMessage:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)dealloc;
-(void)logFn:(const char*)arg1 format:(id)arg2 ;
@end

